Docker Components:
Registry: an environment where images are saved to be shared between teams
Image: a version from our application code to be used
Container: a small environment with all dependencies for our application which is associated with our image we already built

----------------------------------------------------------------------------------------------------------------------
NOTES:
- when we have images in docker desktop app  each image when we run it creates container and associated 
  with it in containers tab 

- to remove and image first it should be unused and has no associated containers so container must be removed first then we can remove the image

- to create an image for release mode in vs change the debug mode to release mode and make the running profile as Docker
  then run the vs it will create and image with tag latest

-----------------------------------------------------------------------------------------------------------------------
COMMANDS:
// AUTHENTICATION
-docker login -u mahmoudalaskalany  // to login with access token paste access token after writing this command (dckr_pat_UeJNxCtl-M9hhCaoqXtim4KDixM)

// BUILD , CREATE , REMOVE IMAGES 
-docker images                      // listing all images

-docker rmi image-name-lowercase or(first three letters of image id)   // remove images 

-docker ps                          // list all running containers

-Images > Container                 // when running this in path with docker files it will create containers for these images

-docker build -t shopping .        // shopping is the image name  , . means there is a docker file here use it to build

// BUILD, RUN CONTAINERS

-docker run -d -p 8080:80 --name myapp shoppingclient //create container with name (my app) from image (shoppingclient) with port 8080

-docker stop (first three letters of container id) // this will stop the container with this id

-docker start (first three letters of container id) // this will start container

-docker rm (first three letters of container id) // this will remove the container with this id

// PUSHING IMAGE TO DOCKER REGISTRY HUB

-docker tag (first three letters of image id) mahmoudalaskalany/shoppingapp // will create image with tag inside this 
repository (check dockertag.png)

-docker push (image name with repository/tagname) // will push image to the repositorywith tag name
ex: docker push mahmoudalaskalany/shoppingapp:latest

check (dockerpush.png)


// PUSHING IMAGE  TO AZURE REGISTRY CONTAINER HUB
these steps will create and deploy app service for our web app using docker container and azure app service
- go to azure and select new resource
- select web app for containers resource
- select your plan
- in docker tab (select docker source as Docker Hub)
- image tag and name write the image name (mahmoudalaskalany/shoppingapp)

check azure/images (azuredeploymentweb.png)

// CI-CD FOR (SINGLE) DOCKER CONTAINER IN AZURE (SINGLE SERVICE)
(check images enablecontinuousdeployment.png and addwebhooktodocker.png)
- enable continuous deployment in azure app service
- copy the webhook url from azure app service in the deployment center tab and paste it in docker webhook tab in repository 
- once the image is changes the repository will trigger webhook and let azure pull latest image
- add new changes to code
- build docker image
- tag the docker image with same repository like before in previous commands
- push latest image to docker hub (if there changes at least one layer must pe pushed check image pushedChanges.png)
- check the azure app service log there should be 
   a pull log for the latest image (the sha1 should be like one in the generated push command check sha1.png)

// CI-CD FOR (Multiple) DOCKER CONTAINER IN AZURE (MICROSERVICES) (ORCHESTRATION)

ORCHESTRATION:
if there are multiple services and has a dependencies on each other we must use docker-compose 
to compose these services together and run them in an order this process is called orchestration

- to add orchestration support for a project right click on the project and click add then select
  container orchestration support
- this will create a docker file if not exist and create a docker-compose file
- if the project has already a docker file it will update the docker compose file with this project details
- to arrange port number between services that has dependency on each other
  in docker-compose.override.yaml file expose the port that is required by the dependent apis
  ports:
   - "8001:80" this will run the service internally on 80 and in our local machine to browse on 8001

- then after that we can run the services using docker compose command in the root directory 
  of the docker compose file

TO SOLVE CANNOT ASSIGN REQUEST ADDRESS EXCEPTION:
- this means some dependent services can't connect the the target services because 
  it is not running or it has an exception
- to fix this add depends_on in the dependant service like this
  depends_on:
   - name of the service in docker compose file ex(shopping.api)

